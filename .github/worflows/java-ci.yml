name: Java CI with Gradle

on:
  push:
    branches:
      - '**'  # Isso faz com que o workflow seja acionado em qualquer branch
  pull_request:
    branches:
      - '**'  # Isso faz com que o workflow seja acionado em pull requests para qualquer branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 21 Corretto
        uses: actions/setup-java@v3
        with:
          java-version: '21.0.3'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Determine new version and create release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAGS=$(git tag)
          if [[ -z "$TAGS" ]]; then
            NEW_VERSION="1.0.0"
          else
            CURRENT_VERSION=$(git describe --tags --abbrev=0)
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
          
            if [[ "$BRANCH_NAME" == feature/* ]]; then
              ((MINOR++))
              PATCH=0
            elif [[ "$BRANCH_NAME" == fix/* ]] || [[ "$BRANCH_NAME" == hotfix/* ]]; then
              ((PATCH++))
            fi
          
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create release
        if: env.NEW_VERSION && github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
